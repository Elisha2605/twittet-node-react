import { Schema, model } from 'mongoose';

const followSchema = new Schema({
  user: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  followers: [{
    user: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true
    }
  }],
  followings: [{
    user: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true
    }
  }],
  pendings: [{
    user: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true
    }
  }]
});

const Follow = model('Follow', followSchema);

export default Follow;


// Follow Request
export const sendFollowRequest = async (
    incommingReqId: string,
    receiverId: string
): Promise<ApiResponse<any>> => {
    try {
        const user: IUser = await User.findById(receiverId);

        if (!user) {
            throw CustomError('User not found', 404);
        }

        const followerUser: IUser = await User.findById(incommingReqId);

        if (!followerUser) {
            throw CustomError('Follower user not found', 404);
        }

        let receiver: any = await Follow.findOne({ user: receiverId });
        let sender: any = await Follow.findOne({ user: receiverId });

        // Handle pending requests
        if (!receiver && !sender && user.isProtected) {
            receiver = new Follow({ user: receiverId });
            sender = new Follow({ user: incommingReqId });
            receiver.pendings.push({ user: followerUser._id });
            sender.waitings.push({ user: receiverId });
            await sender.save();

            const response = await receiver.save();

            return {
                success: true,
                message: 'Successfully sent follow request!',
                status: 200,
                payload: response,
            };
        } else if (receiver && sender && user.isProtected) {
            receiver.pendings.push({ user: followerUser._id });
            sender.waitings.push({ user: receiverId });
            await sender.save();

            const response = await receiver.save();
            return {
                success: true,
                message: 'Successfully sent follow request!',
                status: 200,
                payload: response,
            };
        }

        if (!receiver) {
            receiver = new Follow({ user: receiverId });
        }

        receiver.followers.push({ user: followerUser._id });
        const response = await receiver.save();
        return {
            success: true,
            message: 'Successfully sent follow request!',
            status: 200,
            payload: response,
        };
    } catch (error) {
        const errorResponse: ErrorResponse = {
            success: false,
            message: error.message || 'Internal server error',
            status: error.statusCode || 500,
            error: error,
        };
        return Promise.reject(errorResponse);
    }
};

if (user.isProtected) {
            /**
             * 1. Check if both the receiver and the sender do not exist. if Yes:
             *
             *     a. Create the both receiver and the sender document receiver = new Follow({ user: receiver }) and sender = new Follow({ user: incomingReqId });
             *     b. Push the receiver ID in the "sender.waitings.push({ user: receiverId })";
             *     c. Push the sender ID (incomingReqId) into the "receiver.pendings.push({ user: incomingReqId })"
             *
             * 2. Check if both the receiver and the sender do exist. if Yes:
             *
             *     a. just apdate the pendings and waitings array of both existing document (receiver and sender);
             *
             * 3. Check if only the receiver exist but the sender doesn't exist.
             *
             *    a. Update the pendings array of the receiver by pushing the sender ID into the pendings array of the receiver;
             *    b. Create a new document of the sender and push the receiver ID into the waiting array;
             *
             * 4. Check if the receiver doesn't exist but the sender exists:
             *
             *    a. Create a new document of the receiver and push the sender ID into the pendings array of the receiver;
             *    b. Update the waitings array of the sender by pushing the recever ID into the waitings array of the sender;
             */
        }

        if (!user.isProtected) {
            /**
             * 1. Check if both the receiver and the sender do not exist. if Yes:
             *
             *     a. Create the both receiver and the sender document receiver = new Follow({ user: receiver }) and sender = new Follow({ user: incomingReqId });
             *     b. Push the receiver ID in the "sender.followings.push({ user: receiverId })";
             *     c. Push the sender ID into the "receiver.followers.push({ user: incomingReqId })"
             *
             * 2. Check if both the receiver and the sender do exist. if Yes:
             *
             *     a. Just update the followings array of the sender by pushing the receiver ID in the "sender.followings.push({ user: receiverId })";
             *     b. Just update the followers array of the receiver by pushing the sender ID in the "sender.followers.push({ user: incomingReqId })";
             *
             * 3. Check if only the receiver exist but the sender doesn't exist.
             *
             *    a. Update the followers array of the receiver by pushing the sender ID into the followers array of the receiver;
             *    b. Create a new document of the sender and push the receiver ID into the followings array of the sender;
             *
             * 4. Check if the receiver doesn't exist but the sender exists:
             *
             *    a. Create a new document of the receiver and push the sender ID into the followers array of the receiver;
             *    b. Update the followings array of the sender by pushing the recever ID into the followngs array of the sender;
             */
        }
