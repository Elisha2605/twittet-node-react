export const getUserTweets = async (
    userId: string
): Promise<ApiResponse<any>> => {
    try {
        const tweet = await Tweet.aggregate([
            {
                $match: {
                    $or: [
                        {
                            audience: TWEET_AUDIENCE.everyone,
                        },
                        {
                            mentions: new mongoose.Types.ObjectId(userId),
                        },
                    ],
                },
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'user',
                    foreignField: '_id',
                    as: 'user',
                },
            },
            {
                $unwind: '$user',
            },
            {
                $lookup: {
                    from: 'Like',
                    localField: '_id',
                    foreignField: 'tweet',
                    as: 'likes',
                },
            },
            {
                $unwind: { path: '$likes', preserveNullAndEmptyArrays: true },
            },
            {
                $project: {
                    _id: 1,
                    user: {
                        _id: '$user._id',
                        name: '$user.name',
                        username: '$user.username',
                        avatar: '$user.avatar',
                        coverImage: '$user.coverImage',
                        isVerified: '$user.isVerified',
                        isProtected: '$user.isProtected',
                    },
                    image: 1,
                    text: 1,
                    audience: 1,
                    reply: 1,
                    createdAt: 1,
                    updatedAt: 1,
                    likes: '$likes.likes',
                    totalLikes: {
                        $cond: {
                            if: {
                                $isArray: '$likes.likes',
                            },
                            then: {
                                $size: '$likes.likes',
                            },
                            else: 0,
                        },
                    },
                },
            },
            {
                $sort: {
                    createdAt: -1,
                },
            },
        ]).exec();
        if (tweet.length < 0) {
            throw CustomError('Tweets not found', 204);
        }
        return {
            success: true,
            message: 'Successfully fetched tweets',
            status: 200,
            payload: tweet,
        };
    } catch (error) {
        const errorResponse: ErrorResponse = {
            success: false,
            message: error.message || 'Internal server error',
            status: error.statusCode || 500,
            error: error,
        };
        return Promise.reject(errorResponse);
    }
};